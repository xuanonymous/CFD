PROGRAM nozzle2
    USE subs
    USE types_vars
    USE matrixsolv
    USE gnufor2
    REAL(DP) :: T1,T2,ALPHA,KAPPA,A,B,B1,N1 
    REAL(DP) :: DX,DY,DT,R
    REAL(DP) :: H,L,tH,TL,tc,C
    integer(dp)  :: nx,ny,nt,I,J,K,N,counter
    ! Mesh Variables ####################################################
    REAL(DP), ALLOCATABLE, DIMENSION(:)    :: X, Y, T
    REAL(DP), ALLOCATABLE, DIMENSION(:,:)  :: UIC, U, U_new
	CHARACTER(LEN=20) :: pf
    REAL(DP), ALLOCATABLE, DIMENSION(:) :: Mach,lambda,Tp,He,gamma,Rg
	REAL(DP), ALLOCATABLE, DIMENSION(:) :: P,rho,u_scalar,v_scalar,sound
    REAL(DP), ALLOCATABLE, DIMENSION(:,:) :: F,Fp,Fn, VARS
	! Nozzle Conditions ########################################
	REAL(DP), ALLOCATABLE, DIMENSION(:) :: AREA,Et,P_N,P_N1,e_int,DELP1
	REAL(DP), ALLOCATABLE, DIMENSION(:,:) :: H_source,dAdX
	REAL(DP) :: DELP,cfl,cv
	DY = 0
	A =  0
	B =  10
	nx = 100
	DX = (B-A)/nx
	nu = 0
	CFL = 0.01
	CALL gridgen(L,A,B,DX,X,nx)
	ALLOCATE(u_scalar(nx),v_scalar(nx),He(nx),gamma(nx),P(nx),rho(nx),f(nx,3))
	ALLOCATE(Fp(nx,3),Fn(nx,3),u(nx,3),Tp(nx),Rg(nx),sound(nx),Mach(nx),DELP1(NX))
	ALLOCATE(AREA(NX),dAdX(NX,1),Et(nx),H_source(nx,3),e_int(nx),P_N1(nx),P_N(Nx),U_new(nx,3))
	!################## Initial Conditions
	gamma(:) = 1.4
	cv= (1/(gamma(1)-1))*1716
	DO i=1,int(2.8/dx)
		u_scalar(i) = 1153.0
		P(i) = 1000
		! initial density = 0.00237 slugs / ft^3
		rho(i) = 0.00237
    END DO 
	DO i=int(2.8/dx)+1,nx
		u_scalar(i) = 390.75
		rho(i) = 0.00237
		P(i) = 1000
	END DO 	
	Tp(:) = 527.67/(1+(gamma(:)-1)*0.5*Mach(:)**2)
	v = (DT/DX)
	! Allocate the Nozzle Area Array
	CALL nozzle_area(AREA,X,nx)
	! Calculate dA/dX from O(2) first derivative
	CALL SOTPF(AREA,DX,dAdX,nx)
	e_int(:) = P(:)/(rho(:)*(gamma(:)-1))
	Et(:) = rho(:)*(e_int(:) + 0.5*(u_scalar(:)**2))
    He(:) = (Et(:) + P(:))/rho(:)
    P_N1(:) = P(:)
   	SOUND(:) = abs(SQRT(GAMMA(:)*P(:)/RHO(:)))
	MACH(:) = u_scalar(:)/sound(:)
    CALL solvec(u,rho,u_scalar,P,gamma,nx)
    CALL fluxvec(u,f,gamma,nx)
    CALL AUSM(f,u_scalar,Fp,Fn,rho,He,P,e_int,mach,gamma,sound,nx)
	!CALL van_leer(f,u_scalar,mach,Fp,Fn,rho,sound,gamma,nx)
	k=0
	! Time marching 1-D Euler FTCS Flux Splitting FVM ##########################
	DO
		k = k + 1 
		dt = CFL*DX/(maxval(u_scalar)+maxval(sound))
		v = dt/dx
		write(*,*) 'dt ', dt, 'delp ', delp, &
					'T ', Tp(int(0.7*nx)), &
					'p ', p(int(0.7*nx)), &
					'M ', MACH(int(0.7*nx))
		! Update the Source term then multiply it by dAdX(i)
		CALL source_vec(H_source,p,nx)
		DO i=1,nx
			H_source(i,2) = dAdX(i,1)*H_source(i,2)*dt
		END DO
		DO n=1,3
			DO i=2,nx-1
           		u(i,n) = u(i,n)-dt*0.5*(Fp(i,n)+Fn(i+1,n)-(Fp(i-1,n)+Fn(i,n))) &
           				 +H_source(i,n)/Area(i)
			END DO
    	END DO
		P_N(:) = P(:)
    	CALL DECODE_SOL(u,u_scalar,p,rho,sound,gamma,nx)
		! boundary conditions
		!rho(1) = 0.00237
    	!u_scalar(1) = 1153.0
	
    	! Extrapolate the other boundary conditions
    	u_scalar(nx) = 2*u_scalar(nx-1) - u_scalar(nx-2)	
		e_int(:) = P(:)/(rho(:)*(gamma(:)-1))
	 	e_int(nx) = 2*e_int(nx-1) - e_int(nx-2)
		rho(nx) = 2*rho(nx-1) - rho(nx-2) 
		SOUND(:) = SQRT(GAMMA(:)*P(:)/RHO(:))
		Mach(2:nx) = u_scalar(2:nx)/sound(2:nx)
		Mach(nx) = 2*Mach(nx-1) - Mach(nx-2) 
		rho(nx) = 2*Mach(nx-1) - Mach(nx-2) 
		Tp(:) = 527.67/(1+(gamma(:)-1)*0.5*Mach(:)**2)
		DO i=1,nx
    		Et(i) = rho(i)*e_int(i) + 0.5*rho(i)*u_scalar(i)*u_scalar(i)
    		He(i) = (Et(i) + P(i))/rho(i)
		END DO
	! Check for convergence to steady state###############################
    	delp = 0
    	DO i=1,nx
    		DELP1(i) = ABS(P(i) - P_N(i))
		END DO
		DELP = (SUM(DELP1))
		IF ( DELP .LE. 0.1 ) EXIT
	! ######################################################################
    	CALL solvec(u,rho,u_scalar,P,gamma,nx)
    	CALL fluxvec(u,f,gamma,nx)
		v = (DT/DX)
    	CALL AUSM(f,u_scalar,Fp,Fn,rho,He,P,Et,mach,gamma,sound,nx)
		!CALL van_leer(f,u_scalar,mach,Fp,Fn,rho,sound,gamma,nx)
	END DO
	
	pf = 'n2.dat'
    OPEN(1,file=pf,status='unknown')
	DO i=1,nx
		write(1,*) x(i), ' ', rho(i), &
					' ', u_scalar(i)/area(i), &
					' ', P(i)/area(i), ' ', Mach(I)/area(i), &
					' ', Area(i),' ',Tp(i)
	END DO
END PROGRAM nozzle2
